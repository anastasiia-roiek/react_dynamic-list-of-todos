{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","selectTodoId","selectedTodoId","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","query","setQuery","searchBySelect","setSearchBySelect","value","onChange","event","target","placeholder","style","pointerEvents","get","endpoint","fetch","then","res","json","Loader","TodoModal","closeModal","useState","user","setUser","isUserLoading","setIsUserLoading","useEffect","userId","finally","href","email","name","App","setTodos","setSelectedTodoId","searchQuery","setSearchQuert","setIsTodosLoading","visibleTodos","useMemo","filter","isSearchBySelect","isSearchQuery","toLowerCase","includes","selectedTodo","find","unselectUser","useCallback","length","ReactDOM","render","document","getElementById"],"mappings":"yQAUaA,EAA4BC,gBAAK,gBAE1CC,EAF0C,EAE1CA,MACAC,EAH0C,EAG1CA,aACAC,EAJ0C,EAI1CA,eAJ0C,OAO5C,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBACE,UAAQ,OADV,UAIE,oBAAIF,UAAU,eAAd,SAA8BE,EAAKC,KACnC,oBAAIH,UAAU,eAAd,SACGE,EAAKE,WACJ,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWK,IAAG,GACZ,CAAE,mBAAoBH,EAAKE,WAC3B,CAAE,mBAAoBF,EAAKE,YAH/B,SAKGF,EAAKI,UAGV,oBAAIN,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAAS,WACPV,EAAaI,EAAKC,KALtB,SAQE,sBAAMH,UAAU,OAAhB,SACE,mBACEA,UAAWK,IAAG,MACZ,CAAE,SAA6B,IAAnBN,GACZ,CAAE,eAAgBA,IAAmBG,EAAKC,eAhC/CD,EAAKC,eC3BPM,EAA8Bb,gBAAK,YAKzC,IAJLc,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,eACAC,EACI,EADJA,kBAEA,OACE,uBAAMb,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,MAAOF,EACPG,SAAU,SAAAC,GAAK,OAAIH,EAAkBG,EAAMC,OAAOH,QAHpD,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGd,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACVkB,YAAY,YACZJ,MAAOJ,EACPK,SAAU,SAAAC,GAAK,OAAIL,EAASK,EAAMC,OAAOH,UAE3C,sBAAMd,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdU,GACC,sBAAMV,UAAU,gBAAgBmB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRb,KAAK,SACLP,UAAU,SACVQ,QAAS,kBAAMG,EAAS,kBC5CtC,SAASU,EAAOC,GAId,OAAOC,MANQ,iEAIYD,EAAW,SAGnCE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,U,MAGd,ICXMC,EAAmB,kBAC9B,qBAAK3B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uBCON4B,EAA6BhC,gBAAK,YAA2B,IAAxBM,EAAuB,EAAvBA,KAAM2B,EAAiB,EAAjBA,WACtD,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAUA,OARAC,qBAAU,WFAW,IAACC,EECpBF,GAAiB,IFDGE,EEGZlC,EAAKkC,OFH0Bf,EAAG,iBAAiBe,KEIxDZ,KAAKQ,GACLK,SAAQ,kBAAMH,GAAiB,QACjC,CAAChC,EAAKkC,SAGP,sBAAKpC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBACf,sBAAKA,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYE,EAAKC,MAIjB,wBACEI,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAASqB,OAIb,sBAAK7B,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGE,EAAKI,QAGP2B,IAAkBF,EACf,cAAC,EAAD,IAEA,oBAAG/B,UAAU,QAAQ,UAAQ,aAA7B,UACGE,EAAKE,UACD,wBAAQJ,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBAEJ,OAED,mBAAGsC,KAAI,iBAAYP,EAAKQ,OAAxB,SACGR,EAAKS,sBC7CXC,G,MAAgB,WAC3B,MAA0BX,mBAAiB,IAA3C,mBAAOjC,EAAP,KAAc6C,EAAd,KACA,EAA4CZ,mBAAS,GAArD,mBAAO/B,EAAP,KAAuB4C,EAAvB,KACA,EAAsCb,mBAAS,IAA/C,mBAAOc,EAAP,KAAoBC,EAApB,KACA,EAA4Cf,mBAAS,OAArD,mBAAOlB,EAAP,KAAuBC,EAAvB,KACA,EAA8BiB,oBAAS,GAA9BgB,EAAT,oBAEAX,qBAAU,WACRW,GAAkB,GHVQzB,EAAY,UGanCG,KAAKkB,GACLL,SAAQ,kBAAMS,GAAkB,QAClC,IAEH,IAAMC,EAAeC,mBAAQ,WAC3B,OAAOnD,EAAMoD,QAAO,SAAA/C,GAClB,IAEIgD,EAFEC,EAAgBjD,EAAKI,MAAM8C,cAAcC,SAAST,EAAYQ,eAIpE,OAAQxC,GACN,IAAK,YACHsC,EAAmBhD,EAAKE,UACxB,MAEF,IAAK,SACH8C,GAAoBhD,EAAKE,UACzB,MAEF,IAAK,MACH,OAAO+C,EAMX,OAAOA,GAAiBD,OAEzB,CAACtC,EAAgBgC,EAAa/C,IAE3ByD,EAAeN,mBAAQ,WAC3B,OAAOD,EAAaQ,MAClB,SAAArD,GAAI,OAAIA,EAAKC,KAAOJ,OAErB,CAACA,EAAgBgD,IAEdS,EAAeC,uBAAY,WAC/Bd,EAAkB,KACjB,IAEH,OACE,qCACE,qBAAK3C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAACS,EAAD,CACEC,MAAOkC,EACPjC,SAAUkC,EACVjC,eAAgBA,EAChBC,kBAAmBA,MAIvB,qBAAKb,UAAU,QAAf,SACG+C,EAAaW,OAAS,EAEnB,cAAC/D,EAAD,CACEE,MAAOkD,EACPjD,aAAc6C,EACd5C,eAAgBA,IAIlB,cAAC,EAAD,aAOXuD,GACC,cAAC1B,EAAD,CAAW1B,KAAMoD,EAAczB,WAAY2B,SClGnDG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c089327f.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, { memo } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectTodoId: (todoId: number) => void,\n  selectedTodoId: number\n};\n\nexport const TodoList: React.FC<Props> = memo((\n  {\n    todos,\n    selectTodoId,\n    selectedTodoId,\n  },\n) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={cn('',\n                { 'has-text-success': todo.completed },\n                { 'has-text-danger': !todo.completed })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                selectTodoId(todo.id);\n              }}\n            >\n              <span className=\"icon\">\n                <i\n                  className={cn('far',\n                    { 'fa-eye': selectedTodoId === 0 },\n                    { 'fa-eye-slash': selectedTodoId === todo.id })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n));\n","import React, { memo } from 'react';\n\ntype Props = {\n  query: string;\n  setQuery: (value: string) => void;\n  searchBySelect: string\n  setSearchBySelect: (value: string) => void;\n};\nexport const TodoFilter: React.FC<Props> = memo(({\n  query,\n  setQuery,\n  searchBySelect,\n  setSearchBySelect,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={searchBySelect}\n            onChange={event => setSearchBySelect(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction get<T>(endpoint: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + endpoint + '.json';\n\n  return fetch(fullURL)\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState, memo } from 'react';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo;\n  closeModal: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = memo(({ todo, closeModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(false);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n\n    getUser(todo.userId)\n      .then(setUser)\n      .finally(() => setIsUserLoading(false));\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${todo.id}`}\n          </div>\n\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={closeModal}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {todo.title}\n          </p>\n\n          {isUserLoading || !user\n            ? <Loader />\n            : (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport './App.css';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [searchQuery, setSearchQuert] = useState('');\n  const [searchBySelect, setSearchBySelect] = useState('all');\n  const [, setIsTodosLoading] = useState(false);\n\n  useEffect(() => {\n    setIsTodosLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsTodosLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const isSearchQuery = todo.title.toLowerCase().includes(searchQuery.toLowerCase());\n\n      let isSearchBySelect;\n\n      switch (searchBySelect) {\n        case 'completed':\n          isSearchBySelect = todo.completed;\n          break;\n\n        case 'active':\n          isSearchBySelect = !todo.completed;\n          break;\n\n        case 'all':\n          return isSearchQuery;\n\n        default:\n          break;\n      }\n\n      return isSearchQuery && isSearchBySelect;\n    });\n  }, [searchBySelect, searchQuery, todos]);\n\n  const selectedTodo = useMemo(() => {\n    return visibleTodos.find(\n      todo => todo.id === selectedTodoId,\n    );\n  }, [selectedTodoId, visibleTodos]);\n\n  const unselectUser = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={searchQuery}\n                setQuery={setSearchQuert}\n                searchBySelect={searchBySelect}\n                setSearchBySelect={setSearchBySelect}\n              />\n            </div>\n\n            <div className=\"block\">\n              {visibleTodos.length > 0\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectTodoId={setSelectedTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} closeModal={unselectUser} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}